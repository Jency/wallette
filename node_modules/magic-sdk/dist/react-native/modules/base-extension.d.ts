import { createJsonRpcRequestPayload, standardizeJsonRpcRequestPayload } from '../core/json-rpc';
import { BaseModule } from './base-module';
import { SDKBase } from '../core/sdk';
declare abstract class BaseExtension<TName extends string> extends BaseModule {
    abstract readonly name: TName;
    private isInitialized;
    protected createJsonRpcRequestPayload: typeof createJsonRpcRequestPayload;
    protected standardizeJsonRpcRequestPayload: typeof standardizeJsonRpcRequestPayload;
    constructor();
    init(sdk: SDKBase): void;
}
declare abstract class InternalExtension<TName extends string, TConfig extends any = any> extends BaseExtension<TName> {
    abstract readonly config: TConfig;
}
export declare abstract class Extension<TName extends string> extends BaseExtension<TName> {
    /**
     * This is a special constructor used to mark an extension as "official." Only
     * official extensions can interact with the iframe using custom JSON RPC
     * methods and business logic. This is intended for internal-use only and
     * provides no advantage to open-source extension developers.
     *
     * @internal
     */
    static Internal: typeof InternalExtension;
}
export {};
