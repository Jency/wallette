/// <reference types="react" />
import { PayloadTransport } from './payload-transport';
import { AuthModule } from '../modules/auth';
import { UserModule } from '../modules/user';
import { MagicSDKAdditionalConfiguration, MagicSDKReactNativeAdditionalConfiguration } from '../types';
import { WithExtensions } from '../types/core/extension-types';
import { RPCProviderModule } from '../modules/rpc-provider';
import { ViewController } from '../types/core/view-types';
export declare class SDKBase<TConfiguration extends MagicSDKAdditionalConfiguration = MagicSDKAdditionalConfiguration> {
    readonly apiKey: string;
    private static readonly __transports__;
    private static readonly __overlays__;
    readonly endpoint: string;
    readonly encodedQueryParams: string;
    /**
     * Contains methods for starting a Magic SDK authentication flow.
     */
    readonly auth: AuthModule;
    /**
     * Contains methods for interacting with user data, checking login
     * status, generating cryptographically-secure ID tokens, and more.
     */
    readonly user: UserModule;
    /**
     * Contains a Web3-compliant provider. Pass this module to your Web3/Ethers
     * instance for automatic compatibility with Ethereum methods.
     */
    readonly rpcProvider: RPCProviderModule;
    /**
     * Creates an instance of Magic SDK.
     */
    constructor(apiKey: string, options?: TConfiguration);
    /**
     * Represents the JSON RPC payload message channel associated with this
     * `MagicSDK` instance.
     */
    protected get transport(): PayloadTransport;
    /**
     * Represents the view controller associated with this `MagicSDK` instance.
     */
    protected get overlay(): ViewController;
    /**
     * Preloads the Magic view, allowing for faster initial requests in browser
     * environments. Awaiting the returned promise will signal when the Magic view
     * has completed loading and is ready for requests.
     */
    preload(): Promise<void>;
}
export declare class SDKBaseReactNative extends SDKBase<MagicSDKReactNativeAdditionalConfiguration> {
    get Relayer(): import("react").FC<{}>;
}
export declare const MagicSDK: WithExtensions<SDKBase<MagicSDKAdditionalConfiguration<string, any>>>;
export declare const MagicSDKReactNative: WithExtensions<SDKBaseReactNative>;
